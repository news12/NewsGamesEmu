unit uLoadConfig;

interface

Uses
  System.Classes,
  System.SysUtils,
  Vcl.Forms,
  uClientConected,
  uNewDef,
  uStruct,
  u_Class,
  System.JSON,
  System.JSON.Helper,
  System.JsonFiles,
  uConexao,
  Vcl.ComCtrls,
  uStatusBase,
  uFunc;

Type
  TLoadConfig = Class
  Private
    // Private Classes
    function LoadConexao(Log: TRichEdit): Boolean;
    function LoadLangDB(Log: TRichEdit): Boolean;
    function LoadBaseStatus(Log: TRichEdit): Boolean;

  Public
    // Public Classes
    Constructor Create; // declaração do metodo construtor

    procedure LoadFiles(Log: TRichEdit);

    Destructor Destroy; Override; // declaração do metodo destrutor
  End;

Const
  FileConexao: String = 'Config\Conexao.json';
  FileLangDB: String = 'Lang\LangDB.json';
  FileBaseStatus: String = 'Character\BaseStatus.json';

Var
  BaseClass: Array [0 .. 4] of TStatusBase;

implementation

Var
  cFile: string;
  jFile: TJsonFile;
  BaseStatus: TStatusBase;

function TLoadConfig.LoadConexao(Log: TRichEdit): Boolean;
begin
  cFile := Conexao.FolderGame + FileConexao;
  jFile := TJsonFile.Create(cFile);
  try
    Conexao.DB := jFile.ReadString('MYSQL', 'DB', '');
    Conexao.USER := jFile.ReadString('MYSQL', 'USER', '');
    Conexao.SENHA := jFile.ReadString('MYSQL', 'SENHA', '');
    Conexao.PORTA := jFile.ReadInteger('MYSQL', 'PORTA', 0);
    Conexao.IP := jFile.ReadString('MYSQL', 'IP', '');
    Log.Lines.Add('###################################');
    Log.Lines.Add('DB:');
    jFile.ReadSectionValues('DB', Log.Lines);
    Log.Lines.Add('###################################');
    Log.Lines.Add('SERVER:');
    jFile.ReadSectionValues('SERVER', Log.Lines);
    Log.Lines.Add('###################################');
    Conexao.PORTADB := jFile.ReadInteger('DB', 'PORT', 0);
    Conexao.IPDB := jFile.ReadString('DB', 'IP', '');
    Conexao.PORTACLI := jFile.ReadInteger('SERVER', 'PORT', 0);
    Conexao.IPSERVER := jFile.ReadString('SERVER', 'IP', '');
    pLog(Log, FileConexao + ': carregado com sucesso!!!', 0);
  except
    on E: Exception do
    begin
      pLog(Log, E.Message +
        ' verifica se tem dados informados de forma incorreta no arquivo de Conexão.',
        1);
    end;
  end;
  jFile.Free;
end;

function TLoadConfig.LoadLangDB(Log: TRichEdit): Boolean;
begin
  cFile := Conexao.FolderGame + FileLangDB;
  jFile := TJsonFile.Create(cFile);
  try
    LangLogin.NotAccount := jFile.ReadString('ACCLogin', 'NotAccount', '');
    LangLogin.NumericError := jFile.ReadString('ACCLogin', 'NumericError', '');
    LangLogin.LoggedIn := jFile.ReadString('ACCLogin', 'LoggedIn', '');
    LangLogin.Blocked := jFile.ReadString('ACCLogin', 'Blocked', '');
    LangLogin.Baned := jFile.ReadString('ACCLogin', 'Baned', '');
    LangLogin.ResetPass := jFile.ReadString('ACCLogin', 'ResetPass', '');
    LangLogin.NotFound := jFile.ReadString('ACCLogin', 'NotFound', '');
    LangLogin.CharExists := jFile.ReadString('ACCLogin', 'CharExists', '');
    pLog(Log, FileLangDB + ': carregado com sucesso!!!', 0);
  except
    on E: Exception do
    begin
      pLog(Log, E.Message +
        ' verifica se tem dados informados de forma incorreta no arquivo de Conexão.',
        1);
    end;
  end;
  jFile.Free;
end;

function TLoadConfig.LoadBaseStatus(Log: TRichEdit): Boolean;
begin

  cFile := Conexao.FolderGame + FileBaseStatus;
  jFile := TJsonFile.Create(cFile);
  Try
    // Carrega TK BASE
    BaseClass[TK]._Str := jFile.ReadInteger('TK', 'STR', 0);
    BaseClass[TK].INT := jFile.ReadInteger('TK', 'INT', 0);
    BaseClass[TK].DEX := jFile.ReadInteger('TK', 'DEX', 0);
    BaseClass[TK].CON := jFile.ReadInteger('TK', 'CON', 0);
    // Carrega FM BASE
    BaseClass[FM]._Str := jFile.ReadInteger('FM', 'STR', 0);
    BaseClass[FM].INT := jFile.ReadInteger('FM', 'INT', 0);
    BaseClass[FM].DEX := jFile.ReadInteger('FM', 'DEX', 0);
    BaseClass[FM].CON := jFile.ReadInteger('FM', 'CON', 0);
    // Carrega BM BASE
    BaseClass[BM]._Str := jFile.ReadInteger('BM', 'STR', 0);
    BaseClass[BM].INT := jFile.ReadInteger('BM', 'INT', 0);
    BaseClass[BM].DEX := jFile.ReadInteger('BM', 'DEX', 0);
    BaseClass[BM].CON := jFile.ReadInteger('BM', 'CON', 0);
    // Carrega HT BASE
    BaseClass[HT]._Str := jFile.ReadInteger('HT', 'STR', 0);
    BaseClass[HT].INT := jFile.ReadInteger('HT', 'INT', 0);
    BaseClass[HT].DEX := jFile.ReadInteger('HT', 'DEX', 0);
    BaseClass[HT].CON := jFile.ReadInteger('HT', 'CON', 0);
    // BASE
    BaseClass[BASE].HP := jFile.ReadInteger('BASE', 'HP', 0);
    BaseClass[BASE].MP := jFile.ReadInteger('BASE', 'MP', 0);
    BaseClass[BASE].PosX := jFile.ReadInteger('BASE', 'PosX', 0);
    BaseClass[BASE].PosY := jFile.ReadInteger('BASE', 'PosY', 0);
    BaseClass[BASE].GemX := jFile.ReadInteger('BASE', 'GemX', 0);
    BaseClass[BASE].GemY := jFile.ReadInteger('BASE', 'GemY', 0);

    pLog(Log, FileBaseStatus + ': carregado com sucesso!!!', 0);
  except
    on E: Exception do
    begin
      pLog(Log, E.Message +
        ' verifica se tem dados informados de forma incorreta no arquivo de Conexão.',
        1);
    end;
  end;
  jFile.Free;
end;

procedure TLoadConfig.LoadFiles(Log: TRichEdit);
begin
  LoadConexao(Log);
  LoadLangDB(Log);
  LoadBaseStatus(Log);
end;

constructor TLoadConfig.Create;
Var
  I: Integer;
begin

  Conexao := tConexao.Create;
  for I := 0 to BASE do
  begin
    BaseClass[I] := TStatusBase.Create;
  end;

end;

destructor TLoadConfig.Destroy;
Var
  I: Integer;
begin

  inherited;
  Conexao.Free;
  for I := 0 to BASE do
  begin
    BaseClass[I].Free;
  end;

end;

end.
